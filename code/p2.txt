int num = 7; 
int timer = -3000;
Spring[] springs = new Spring[num]; 
Spot[] spots;

void setup() {
  size(1920, 1080);
  noStroke(); 
  //Spring(float x, float y, int s, float d, float m, float k_in, Spring[] others, int id)

  springs[0] = new Spring(240, 760, 40, 0.98, 8.0, 0.1, springs, 0); 
  springs[1] = new Spring(320, 410, 120, 0.95, 9.0, 0.1, springs, 1); 
  springs[2] = new Spring(180, 270, 200, 0.90, 9.9, 0.1, springs, 2);
  springs[3] = new Spring(1600, height/2, 150, 0.92, 9.5, 0.3, springs, 3);
  springs[4] = new Spring(1000, 300, 70, 0.92, 9.5, 0.5, springs, 4);
  springs[5] = new Spring(width/2, height/2, 350, 0.92, 9.5, 0.05, springs, 5);
  springs[6] = new Spring(1700, 300, 20, 0.98, 8.0, 0.1, springs, 6);
  
    int numSpots = 250; // Number of objects
  int dia = width/numSpots; // Calculate diameter
  spots = new Spot[numSpots]; // Create array
  for (int i = 0; i < spots.length; i++) {
    float x = dia/2 + i*dia;
    float rate = random(0.1, 1);
    // Create each object
    spots[i] = new Spot(x, 50, dia, rate, 0);
  }
}

void draw() {
  //background(0); 
  //fill(0, 100);
  rect(0, 0, width, height);
   //background(0); 
  fill(random(150,250),random(150,250),random(150,250));
  for (int i=0; i < spots.length; i++) {
    spots[i].move(); // Move each object
    spots[i].display(); // Display each object
  }

  for (Spring spring : springs) { 
    spring.update(); 
    spring.display();
  }
  if (frameCount < 10) {
    springs[0]= new Spring(140, 760, 40, 0.98, 8.0, 0.1, springs, 0);
  }  
  if (frameCount < 100) {
    springs[1]= new Spring(320, 410, 120, 0.95, 9.0, 0.1, springs, 1);
  }
  if (frameCount < 200) {
    springs[2] = new Spring(180, 270, 200, 0.90, 9.9, 0.1, springs, 2);
  }
  if (frameCount < 300) {
    springs[3] = new Spring(1600, height/2, 150, 0.92, 9.5, 0.3, springs, 3);
  }
  if (frameCount < 400) {
  springs[4] = new Spring(1000, 300, 70, 0.92, 9.5, 0.5, springs, 4);
  }
    if (frameCount < 500) {
  springs[6] = new Spring(1700, 300, 20, 0.98, 8.0, 0.1, springs, 6);
  }
  
   if (frameCount < 750 ) {
  saveFrame("images/face-######.png");
  } else {  
    exit();  
  }
  
}

void mousePressed() {
  for (Spring spring : springs) { 
    spring.pressed();
  }
}

void mouseReleased() {
  for (Spring spring : springs) { 
    spring.released();
  }
}


class Spot {
  float x, y;         // X-coordinate, y-coordinate
  float diameter;     // Diameter of the circle
  float speed;        // Distance moved each frame
  int direction = 5;  // Direction of motion (1 is down, -1 is up)
  float rotate;
  // Constructor
  Spot(float xpos, float ypos, float dia, float sp, float ro) {
    x = xpos;
    y = ypos;
    diameter = dia;
    speed = sp;
    rotate = ro;
  }
    
  void move() {
    y += (speed * direction); 
    if ((y > (height - diameter/2)) || (y < diameter/2)) { 
      direction *= -5; 
      rotate *= 1;
    } 
    
    //    x += (speed * direction); 
    //if ((x > (width - diameter/2)) || (x < diameter/2)) { 
    //  direction *= -5; 
    //  rotate *= 1;
    //} 
  }
  
  void display() {
    rect(x, y, diameter, diameter);
    ellipse(-x,-y , diameter, diameter);
  // rotate(radians(.01));
  }
}

class Spring { 
  // Screen values 
  float xpos, ypos;
  float tempxpos, tempypos; 
  int size = 20; 
  
  boolean over = true; 
  boolean move = true; 

  // Spring simulation constants 
  float mass;       // Mass 
  float k = 0.2;    // Spring constant 
  float damp;       // Damping 
  float rest_posx;  // Rest position X 
  float rest_posy;  // Rest position Y 

  // Spring simulation variables 
  //float pos = 20.0; // Position 
  float velx = 0.0;   // X Velocity 
  float vely = 0.0;   // Y Velocity 
  float accel = 0;    // Acceleration 
  float force = 0.2;    // Force 

  Spring[] friends;
  int me;

  // Constructor
  Spring(float x, float y, int s, float d, float m, float k_in, Spring[] others, int id) { 
    xpos = tempxpos = x; 
    ypos = tempypos = y;
    rest_posx = x;
    rest_posy = y;
    size = s;
    damp = d; 
    mass = m; 
    k = k_in;
    friends = others;
    me = id;
  } 

  void update() { 
    if (move) { 
      rest_posy = mouseY; 
      rest_posx = mouseX;
    } 

    force = -k * (tempypos - rest_posy);  // f=-ky 
    accel = force / mass;                 // Set the acceleration, f=ma == a=f/m 
    vely = damp * (vely + accel);         // Set the velocity 
    tempypos = tempypos + vely;           // Updated position 

    force = -k * (tempxpos - rest_posx);  // f=-ky 
    accel = force / mass;                 // Set the acceleration, f=ma == a=f/m 
    velx = damp * (velx + accel);         // Set the velocity 
    tempxpos = tempxpos + velx;           // Updated position 


    if ((overEvent() || move) && !otherOver() ) { 
      over = true;
    } else { 
      over = false;
    }
  } 

  // Test to see if mouse is over this spring
  boolean overEvent() {
    float disX = tempxpos - mouseX;
    float disY = tempypos - mouseY;
    if (sqrt(sq(disX) + sq(disY)) < size/2 ) {
      return true;
    } else {
      return false;
    }
  }

  // Make sure no other springs are active
  boolean otherOver() {
    for (int i=0; i<num; i++) {
      if (i != me) {
        if (friends[i].over == true) {
          return true;
        }
      }
    }
    return false;
  }

  void display() { 
    if (over) { 
      fill(200);
    } else { 
      fill(100,100,200,50);
    } 
    ellipse(tempxpos, tempypos, size, size);
  } 

  void pressed() { 
    if (over) { 
      move = true;
    } else { 
      move = false;
    }
  } 

  void released() { 
    move = false; 
    rest_posx = xpos;
    rest_posy = ypos;
  }
} 